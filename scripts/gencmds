#!/usr/bin/env python3
import json


def cmd(procs, impl, args):
  cmd_template = "/usr/bin/env time -v ./main.mpl.bin @mpl procs {} max-cc-depth 1 set-affinity -- -warmup 5 -repeat 20 -impl {} {}"
  return cmd_template.format(str(procs), impl, args)


def interval_tree(procs, impl):
  row = {
    "tag": "interval-tree",
    "cwd": "bench/build-intervaltree",
    "cmd": cmd(procs, impl, "-n 5000000"),
    "procs": procs,
    "impl": impl
  }
  return row


def dmm(procs, impl):
  row = {
    "tag": "dmm",
    "cwd": "bench/dmm-flat-mat",
    "cmd": cmd(procs, impl, "-n 8192"),
    "procs": procs,
    "impl": impl
  }
  return row


def mandelbrot(procs, impl):
  row = {
    "tag": "mandelbrot",
    "cwd": "bench/mandelbrot",
    "cmd": cmd(procs, impl, ""),
    "procs": procs,
    "impl": impl
  }
  return row


def raytracer(procs, impl):
  row = {
    "tag": "raytracer",
    "cwd": "bench/raytracer",
    "cmd": cmd(procs, impl, "-h 1000 -w 1000"),
    "procs": procs,
    "impl": impl
  }
  return row


def mergesort(procs, impl):
  row = {
    "tag": "mergesort",
    "cwd": "bench/mergesort",
    "cmd": cmd(procs, impl, "-n 10000000"),
    "procs": procs,
    "impl": impl
  }
  return row


def new_primes(procs, impl):
  row = {
    "tag": "new-primes",
    "cwd": "bench/primes",
    "cmd": cmd(procs, impl, "-n 100000000"),
    "procs": procs,
    "impl": impl
  }
  return row


def quickhull(procs, impl):
  row = {
    "tag": "quickhull",
    "cwd": "bench/quickhull",
    "cmd": cmd(procs, impl, "-points /home/ec2-user/geom-data/uniform-circle-10M"),
    "procs": procs,
    "impl": impl
  }
  return row


def bfs(procs, impl):
  row = {
    "tag": "bfs",
    "cwd": "bench/bfs",
    "cmd": cmd(procs, impl, "/home/ec2-user/graph-data/rmat-10M-symm-bin"),
    "procs": procs,
    "impl": impl
  }
  return row


def kmeans(procs, impl):
  row = {
    "tag": "kmeans",
    "cwd": "bench/kmeans",
    "cmd": cmd(procs, impl, "--gen-random-input -n 100000 -d 1000 -k 5 -hist-gpu-grain 10000 -hist-cpu-grain 500 -hist-gpu-split 0.2"),
    "procs": procs,
    "impl": impl
  }
  return row


def sparse_mxv(procs, impl):
  row = {
    "tag": "sparse-mxv",
    "cwd": "bench/sparse-mxv",
    "cmd": cmd(procs, impl, "-input /home/ec2-user/suite-sparse/stokes/stokes.mtx.bin --exclude-copy-mat-onto-gpu")
    "procs": procs,
    "impl": impl
  }
  return row


# ============================================================================


def add_extra(row):
  if row is None:
    return row
  row = row.copy()
  row['bench'] = 'main'
  row['config'] = 'mpl'
  return row


uniques = set()
def filter_unique(row):
  if row is None:
    return None
  if row['cmd'] in uniques:
    return None
  uniques.add(row['cmd'])
  return row


def filter_gpu_procs(row):
  if row is None:
    return None
  if row['impl'] == 'gpu' and row['procs'] != 1:
    return None
  return row


tests = [
  add_extra(filter_gpu_procs(filter_unique(make_row(procs, impl))))
  for make_row in [interval_tree, dmm, mandelbrot, raytracer, mergesort, new_primes, quickhull, bfs, kmeans, sparse_mxv]
  for procs in [1,2,4,6,8,12,16,24,30,32]
  for impl in ["hybrid","cpu","gpu"]
]
tests = [ r for r in tests if r is not None ]

for r in tests:
  print(json.dumps(r))
