#!/usr/bin/env python3
import json
import copy

def cmd(procs, gpus, impl, args, warmup=5, repeat=20):
  dev_list = ",".join("#{}".format(i) for i in range(0, gpus))
  dev_str = "'{}'".format(dev_list)
  cmd_template = f"/usr/bin/env time -v ./main.mpl.bin @mpl procs {procs} max-cc-depth 1 set-affinity -- -warmup {warmup} -repeat {repeat} -devices {dev_str} -impl {impl} {args}"
  return cmd_template


def interval_tree(procs, gpus, impl):
  row = {
    "tag": "interval-tree",
    "cwd": "bench/build-intervaltree",
    "cmd": cmd(procs, gpus, impl, "-n 5000000"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def dmm(procs, gpus, impl):
  row = {
    "tag": "dmm",
    "cwd": "bench/dmm-flat-mat",
    "cmd": cmd(procs, gpus, impl, "-n 8192"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def mandelbrot(procs, gpus, impl):
  row = {
    "tag": "mandelbrot",
    "cwd": "bench/mandelbrot",
    "cmd": cmd(procs, gpus, impl, ""),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def raytracer(procs, gpus, impl):
  row = {
    "tag": "raytracer",
    "cwd": "bench/raytracer",
    "cmd": cmd(procs, gpus, impl, "-h 1000 -w 1000"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def mergesort(procs, gpus, impl):
  row = {
    "tag": "mergesort",
    "cwd": "bench/mergesort",
    "cmd": cmd(procs, gpus, impl, "-n 10000000"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def new_primes(procs, gpus, impl):
  row = {
    "tag": "new-primes",
    "cwd": "bench/primes",
    "cmd": cmd(procs, gpus, impl, "-n 1000000000"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def quickhull(procs, gpus, impl):
  row = {
    "tag": "quickhull",
    "cwd": "bench/quickhull",
    "cmd": cmd(procs, gpus, impl, "-points /home/cc/data/geom/2d/uniform-circle-10M"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def bfs(procs, gpus, impl):
  row = {
    "tag": "bfs",
    "cwd": "bench/bfs",
    "cmd": cmd(procs, gpus, impl, "/home/cc/data/graph/rmat-10M-symm-bin"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def kmeans(procs, gpus, impl):
  warmup = 1 if impl == "cpu" and procs == 1 else 5
  repeat = 3 if impl == "cpu" and procs == 1 else 20
  row = {
    "tag": "kmeans",
    "cwd": "bench/kmeans",
    "cmd": cmd(procs, gpus, impl, "--gen-random-input -n 1000000 -d 512 -k 16", warmup=warmup, repeat=repeat),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


def sparse_mxv(procs, gpus, impl):
  row = {
    "tag": "sparse-mxv",
    "cwd": "bench/sparse-mxv",
    "cmd": cmd(procs, gpus, impl, "-input /home/cc/data/mtx/stokes.mtx.bin --exclude-copy-mat-onto-gpu"),
    "procs": procs,
    "gpus": gpus,
    "impl": impl
  }
  return row


# ============================================================================


def add_extra(row):
  if row is None:
    return row
  row = row.copy()
  row['bench'] = 'main'
  row['config'] = 'mpl'
  return row


uniques = set()
def filter_unique(row):
  if row is None:
    return None
  if row['cmd'] in uniques:
    return None
  uniques.add(row['cmd'])
  return row


def filter_gpu_procs(row):
  if row is None:
    return None
  if row['impl'] == 'gpu' and (row['procs'] != 1 or row['gpus'] != 1):
    return None
  if row['impl'] == 'cpu' and row['gpus'] != 1:
    return None
  if row['impl'] == 'hybrid' and row['procs'] < row['gpus']:
    return None
  if row['impl'] == 'multi-gpu' and row['procs'] != row['gpus']:
    return None
  return row


tests = [
  add_extra(filter_unique(filter_gpu_procs(make_row(procs, gpus, impl))))
  for make_row in [interval_tree, dmm, mandelbrot, raytracer, mergesort, new_primes, quickhull, bfs, kmeans, sparse_mxv]
  for procs in [1,10,20,30,40,50,60,70,80]
  for gpus in [1,2,3,4]
  for impl in ["hybrid","cpu","gpu"]
]
tests += [
  add_extra(filter_unique(filter_gpu_procs(make_row(gpus, gpus, 'multi-gpu'))))
  for make_row in [interval_tree, dmm, mandelbrot, raytracer, mergesort, new_primes, quickhull, bfs, kmeans, sparse_mxv]
  for gpus in [1,2,3,4]
]
tests = [ r for r in tests if r is not None ]

for r in tests:
  print(json.dumps(r))
